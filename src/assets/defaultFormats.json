[
    {
        "name": "JSON",
        "mime": "application/json",
        "prompt": "This specification defines the structure and format for data output in JSON, covering data types, hierarchical structures, optional elements, and metadata to ensure consistency and clarity in the JSON data representation.1. General Structure: Each JSON object represents a data entity or a group of related entities, consisting of key-value pairs where the key is a string, and the value can be of various data types including strings, numbers, arrays, or other objects.2. Data Types: JSON supports several data types:String: Represented as a sequence of characters enclosed in double quotes.Number: Numeric values, either integer or floating-point.Boolean: Represents true or false.Array: A list of values, which can be of any data type.Object: A nested collection of key-value pairs.Null: Represents an empty or undefined value.3. Hierarchical Structure: JSON objects can be nested within one another to represent hierarchical relationships between data.4. Optional Elements: Some JSON keys may be optional. If a value is not provided, the key can either be omitted or set to null.5. Metadata: Optional metadata can be included to provide additional context, such as timestamps, version numbers, or status indicators.6. Error Handling: When representing errors or exceptions, a standard structure should be used, including error codes and messages.7. Formatting: JSON data should be formatted with indentation and line breaks for readability, using 2 spaces for indentation and ensuring each key-value pair is on a new line within an object or array."
    },
    {
        "name": "Fountain",
        "mime": "text/plain",
        "prompt": "Prompt Specification for LLM: Fountain Markdown Style Objective: The LLM should generate text in the Fountain markdown style used for screenwriting. This requires adherence to specific syntax rules to accurately represent scene headings, dialogue, action descriptions, transitions, and other screenplay elements. 1. Scene Headings Structure: Begin with keywords like INT, EXT, EST, INT./EXT, INT/EXT, or I/E, followed by a location, a hyphen, and a time of day (e.g., INT. HOUSE - DAY). Forced Scene Heading: Prefix any line with a period . to force it into a scene heading (e.g., .SNIPER SCOPE POV).Scene Numbers: Optionally, append scene numbers in #1# format (e.g., INT. HOUSE - DAY #1A#).Uppercase Recommendation: Scene headings are recommended to be in uppercase but are case insensitive.2. ActionDescription: Any line that doesn't meet other element criteria is treated as Action.Whitespace: Respect all carriage returns and tabs; these are intentional.Forced Action: Prefix with an exclamation mark ! to force Action, even if in uppercase (e.g., !SCANNING THE AISLES).3. CharacterStructure: Lines in all uppercase with one blank line before and no blank line after (e.g., STEEL).Forced Character: Prefix with @ to force a Character element, preserving case sensitivity (e.g., @McCLANE).4. DialogueStructure: Follows a Character element. Line breaks are allowed within dialogue.Empty Lines: If an empty line is needed, use two spaces on a blank line to prevent it from being interpreted as Action.5. ParentheticalsStructure: Parentheticals are enclosed in parentheses () and follow Character or Dialogue elements (e.g., STEEL (starting the engine)).6. Dual DialogueStructure: Indicate dual dialogue by adding a caret ^ after the second Character element (e.g., STEEL ^).7. LyricsStructure: Start with a tilde ~ to create a Lyric (e.g., ~Willy Wonka! Willy Wonka!).8. TransitionsStructure: Lines in uppercase ending with TO: (e.g., CUT TO:).Forced Transition: Prefix with a greater-than symbol > (e.g., >Burn to White).9. Centered TextStructure: Center text by bracketing it with greater-than and less-than symbols (e.g., >THE END<).10. EmphasisUnderline: Wrap text with underscores _text_.Italics: Wrap text with asterisks *text*.Bold: Wrap text with double asterisks **text**.Combinations: Combine emphasis as needed (e.g., ***bold italics*** or _an *italicized* word_).11. Title PageStructure: Key-value pairs with optional indentations (e.g., Title: _**BRICK & STEEL**_).12. Page BreaksStructure: A line with three or more equals signs === to indicate a page break.13. NotesStructure: Enclose text with double brackets [            [Note here            ]        ] for inline or block notes.14. BoneyardStructure: Use /* text */ to comment out or ignore sections of text.15. Punctuation and Line BreaksPunctuation: Fountain doesn't automatically convert shorthand punctuation; maintain typewriter-style punctuation.Line Breaks: Each carriage return is intentional and should be preserved."
    }
]